(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(93)),i=["components"],c={id:"streams",title:"Streams"},s={unversionedId:"streams",id:"streams",isDocsHomePage:!1,title:"Streams",description:"xoid offers basic support for streams. Streams are generally treated as a whole different concept than atoms. They're actually very close, and there's no need for a completely different library for them. xoid thinks that streams can easily be a a \"bonus feature\" of an atomic state management library.",source:"@site/main/docs/streams.md",slug:"/streams",permalink:"/docs/streams",editUrl:"https://github.com/xoidlabs/xoid/blob/main/docs/streams.md",version:"current",sidebar:"docs",previous:{title:"Performance optimizations",permalink:"/docs/performance-optimizations"},next:{title:"Advanced concepts",permalink:"/docs/advanced-concepts"}},l=[{value:"Using the <code>.map</code> method with <code>true</code> as the second argument",id:"using-the-map-method-with-true-as-the-second-argument",children:[]},{value:"Using <code>create</code> with no arguments",id:"using-create-with-no-arguments",children:[]}],p={rightToc:l},u="wrapper";function b(e){var t=e.components,n=Object(r.a)(e,i);return Object(o.b)(u,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"xoid")," offers basic support for ",Object(o.b)("strong",{parentName:"p"},"streams"),". Streams are generally treated as a whole different concept than atoms. They're actually very close, and there's no need for a completely different library for them. ",Object(o.b)("strong",{parentName:"p"},"xoid"),' thinks that streams can easily be a a "bonus feature" of an atomic state management library. '),Object(o.b)("p",null,"Our definition of a stream is the following:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"A ",Object(o.b)("strong",{parentName:"p"},"stream")," is an ",Object(o.b)("strong",{parentName:"p"},"atom")," that ",Object(o.b)("strong",{parentName:"p"},"may not")," have an immediate value.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"xoid")," have a separate ",Object(o.b)("inlineCode",{parentName:"p"},"Stream")," type along with the ",Object(o.b)("inlineCode",{parentName:"p"},"Atom"),".\nStreams differ from atoms not only by types, but also in terms of the runtime behaviour. "),Object(o.b)("p",null,"There are two ways to produce a stream in ",Object(o.b)("strong",{parentName:"p"},"xoid"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Using the ",Object(o.b)("inlineCode",{parentName:"li"},".map")," method with ",Object(o.b)("inlineCode",{parentName:"li"},"true")," as the second argument "),Object(o.b)("li",{parentName:"ul"},"Using ",Object(o.b)("inlineCode",{parentName:"li"},"create")," with no arguments")),Object(o.b)("h3",{id:"using-the-map-method-with-true-as-the-second-argument"},"Using the ",Object(o.b)("inlineCode",{parentName:"h3"},".map")," method with ",Object(o.b)("inlineCode",{parentName:"h3"},"true")," as the second argument"),Object(o.b)("p",null,"Imagine we're setting up a basic counter, and we're deriving another counter that takes only the odd values from the first.\nWe can set this up in the following way:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const $counter = create(0)\nconst $odd = $counter.map((s) => s % 2 ? s : undefined, true) \n// Type of `$odd` would be `Stream<number>`\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"true"),' in the second argument means "filter out falsy values" here.\nIf we didn\'t use this overload of ',Object(o.b)("inlineCode",{parentName:"p"},".map"),", we would end up with a ",Object(o.b)("inlineCode",{parentName:"p"},"Atom<number | undefined>"),".\nHowever, we would lose the following benefits:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const $doubleOdd = $odd.map((value) => value * 2)\n")),Object(o.b)("p",null,"Here, the type of ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is always a ",Object(o.b)("inlineCode",{parentName:"p"},"number"),". If we were working with a ",Object(o.b)("inlineCode",{parentName:"p"},"Atom<number | undefined>")," instead of a ",Object(o.b)("inlineCode",{parentName:"p"},"Stream<number>"),", ",Object(o.b)("inlineCode",{parentName:"p"},"value")," would also be ",Object(o.b)("inlineCode",{parentName:"p"},"number | undefined")," and our code would be slightly more verbose to cover those cases."),Object(o.b)("h3",{id:"using-create-with-no-arguments"},"Using ",Object(o.b)("inlineCode",{parentName:"h3"},"create")," with no arguments"),Object(o.b)("p",null,"When no arguments are used, ",Object(o.b)("inlineCode",{parentName:"p"},"create")," function produces a ",Object(o.b)("inlineCode",{parentName:"p"},"Stream")," instead of an ",Object(o.b)("inlineCode",{parentName:"p"},"Atom"),". Let's assume we're creating a ",Object(o.b)("inlineCode",{parentName:"p"},"$clickStream")," and a ",Object(o.b)("inlineCode",{parentName:"p"},"$clickAtom")," like the following:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import create from 'xoid'\n\nconst $clickStream = create<MouseEvent>() // Stream<MouseEvent>\nconst $clickAtom = create<MouseEvent | undefined>(undefined) // Atom<MouseEvent | undefined>\n\n// Imagine we're going to satisfy the internal value of these atoms later as:\nwindow.addEventListener('click', $clickStream.set)\nwindow.addEventListener('click', $clickAtom.set)\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note that in JavaScript, calling a function with no arguments can be different than calling it with ",Object(o.b)("inlineCode",{parentName:"p"},"undefined"),", if the internal implementation of the function makes use of the ",Object(o.b)("inlineCode",{parentName:"p"},"arguments.length")," builtin. ",Object(o.b)("strong",{parentName:"p"},"xoid")," makes use of exactly that.")),Object(o.b)("p",null,"Let's look at the similarities and differences between ",Object(o.b)("inlineCode",{parentName:"p"},"$clickStream")," and ",Object(o.b)("inlineCode",{parentName:"p"},"$clickAtom"),".\nFirst of all, their ",Object(o.b)("inlineCode",{parentName:"p"},".value")," getter types are the same."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"$clickStream.value // MouseEvent | undefined\n$clickAtom.value // MouseEvent | undefined\n")),Object(o.b)("p",null,"However, there's a difference in ",Object(o.b)("inlineCode",{parentName:"p"},".set")," method's types. This applies for ",Object(o.b)("inlineCode",{parentName:"p"},".update")," as well."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"$clickStream.set // (value: MouseEvent) => void\n$clickAtom.set // (value: MouseEvent | undefined) => void\n")),Object(o.b)("p",null,"A stream's key feature is the behavior of its ",Object(o.b)("inlineCode",{parentName:"p"},".map")," and ",Object(o.b)("inlineCode",{parentName:"p"},".focus")," methods.\nFirst, let's look at the ",Object(o.b)("inlineCode",{parentName:"p"},".map")," method's types."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"$clickStream.map((value) => { /* `value` has the `MouseEvent` type */ })\n$clickAtom.map((value) => { /* `value` has the `MouseEvent | undefined` type */ })\n")),Object(o.b)("p",null,"As you can see, even though ",Object(o.b)("inlineCode",{parentName:"p"},"$clickStream")," starts off ",Object(o.b)("inlineCode",{parentName:"p"},"undefined")," as its internal value, we do not run into any ",Object(o.b)("inlineCode",{parentName:"p"},"undefined")," type inside the ",Object(o.b)("inlineCode",{parentName:"p"},".map")," method callback. This can be beneficial, because now you can chain multiple ",Object(o.b)("inlineCode",{parentName:"p"},".map")," methods without caring about the ",Object(o.b)("inlineCode",{parentName:"p"},"undefined")," states."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const double = (value: number) => value * 2\n\nconst $doubleX = clickStream\n  .map((event) => event.clientX)\n  .map(double)\n")),Object(o.b)("hr",null),Object(o.b)("p",null,"Lastly, here's the difference of the two, from the ",Object(o.b)("inlineCode",{parentName:"p"},"index.d.ts")," file of ",Object(o.b)("strong",{parentName:"p"},"xoid"),". "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"export type Atom<T> = {\n  value: T\n  set(state: T): void\n  update(fn: (state: T) => T): void\n  subscribe(fn: (state: T, prevState: T) => unknown): () => void\n  watch(fn: (state: T, prevState: T) => unknown): () => void\n  focus<U>(fn: (state: T) => U): Atom<U>\n  focus<U extends keyof T>(key: U): Atom<T[U]>\n  map<U>(fn: (state: T, prevState: T) => U): Atom<U>\n  map<U>(fn: (state: T, prevState: T) => U, filterOutFalsyValues: true): Stream<Truthy<U>>\n}\n\nexport type Stream<T> = {\n  value: T | undefined\n  set(state: T): void\n  update(fn: (state: T | undefined) => T): void\n  subscribe(fn: (state: T, prevState: T | undefined) => unknown): () => void\n  watch(fn: (state: T | undefined, prevState: T | undefined) => unknown): () => void\n  focus<U>(fn: (state: T) => U): Stream<U>\n  focus<U extends keyof T>(key: U): Stream<T[U]>\n  map<U>(fn: (state: T, prevState: T | undefined) => U): Stream<U>\n  map<U>(\n    fn: (state: T, prevState: T | undefined) => U,\n    filterOutFalsyValues: true\n  ): Stream<Truthy<U>>\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Observe that the few major differences are the ",Object(o.b)("inlineCode",{parentName:"p"},".value")," getter and bunch of ",Object(o.b)("inlineCode",{parentName:"p"},"prevState"),"s.")))}b.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,d=u["".concat(i,".").concat(b)]||u[b]||m[b]||o;return n?r.a.createElement(d,c(c({ref:t},l),{},{components:n})):r.a.createElement(d,c({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[b]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);