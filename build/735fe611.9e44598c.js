(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(93)),c=["components"],i={id:"quick-tutorial",title:"Quick Tutorial"},s={unversionedId:"quick-tutorial",id:"quick-tutorial",isDocsHomePage:!1,title:"Quick Tutorial",description:"You can skip this part if you've already read the Github README.",source:"@site/main/docs/quick-tutorial.md",slug:"/quick-tutorial",permalink:"/docs/quick-tutorial",editUrl:"https://github.com/xoidlabs/xoid/blob/main/docs/quick-tutorial.md",version:"current",sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Performance optimizations",permalink:"/docs/performance-optimizations"}},l=[{value:"Atom",id:"atom",children:[]},{value:"Derived state",id:"derived-state",children:[]},{value:"Subscriptions",id:"subscriptions",children:[]}],u={rightToc:l},p="wrapper";function b(e){var t=e.components,n=Object(r.a)(e,c);return Object(o.b)(p,Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"You can skip this part if you've already read the Github README.")),Object(o.b)("h3",{id:"atom"},"Atom"),Object(o.b)("p",null,"Atoms are holders of state."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import create from 'xoid' // or: import { create } from 'xoid'\n\nconst $count = create(3)\nconsole.log($count.value) // 3\n$count.set(5)\n$count.update((state) => state + 1)\nconsole.log($count.value) // 6\n")),Object(o.b)("p",null,"Atoms may have actions."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import create from 'xoid'\n\nconst $count = create(5, (atom) => ({\n  increment: () => atom.update(s => s + 1),\n  decrement: () => atom.value-- // `.value` setter is supported too\n}))\n\n$count.actions.increment()\n")),Object(o.b)("p",null,"There's the ",Object(o.b)("inlineCode",{parentName:"p"},".focus")," method, which can be used as a selector/lens. ",Object(o.b)("strong",{parentName:"p"},"xoid"),' is based on immutable updates, so if you "surgically" set state of a focused branch, changes will propagate to the root.'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import create from 'xoid'\n\nconst $atom = create({ deeply: { nested: { alpha: 5 } } })\nconst previousValue = $atom.value\n\n// select `.deeply.nested.alpha`\nconst $alpha = $atom.focus(s => s.deeply.nested.alpha)\n$alpha.set(6)\n\n// root state is replaced with new immutable state\nassert($atom.value !== previousValue) // \u2705\nassert($atom.value.deeply.nested.alpha === 6) // \u2705\n")),Object(o.b)("h3",{id:"derived-state"},"Derived state"),Object(o.b)("p",null,"State can be derived from other atoms. This API was heavily inspired by ",Object(o.b)("strong",{parentName:"p"},"Recoil"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const $alpha = create(3)\nconst $beta = create(5)\n// derived atom\nconst $sum = create((read) => read($alpha) + read($beta))\n")),Object(o.b)("p",null,"Alternatively, ",Object(o.b)("inlineCode",{parentName:"p"},".map")," method can be used to quickly derive the state from a single atom."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const $alpha = create(3)\n// derived atom\nconst $doubleAlpha = $alpha.map((s) => s * 2)\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Atoms are lazily evaluated. This means that the callback functions of ",Object(o.b)("inlineCode",{parentName:"p"},"$sum")," and ",Object(o.b)("inlineCode",{parentName:"p"},"$doubleAlpha")," in this example won't execute until the first subscription to these atoms. This is a performance optimization.")),Object(o.b)("h3",{id:"subscriptions"},"Subscriptions"),Object(o.b)("p",null,"For subscriptions, ",Object(o.b)("inlineCode",{parentName:"p"},"subscribe")," and ",Object(o.b)("inlineCode",{parentName:"p"},"watch")," are used. They are the same, except ",Object(o.b)("inlineCode",{parentName:"p"},"watch")," runs the callback immediately, while ",Object(o.b)("inlineCode",{parentName:"p"},"subscribe")," waits for the first update after subscription."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const unsub = $atom.subscribe((state, previousState) => {\n  console.log(state, previousState)\n})\n\n// later\nunsub()\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"All methods of a ",Object(o.b)("strong",{parentName:"p"},"xoid")," atom are covered up to this point. This concludes the basic usage! \ud83c\udf89")))}b.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,m=p["".concat(c,".").concat(b)]||p[b]||d[b]||o;return n?r.a.createElement(m,i(i({ref:t},l),{},{components:n})):r.a.createElement(m,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[b]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);