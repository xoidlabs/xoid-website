"use strict";(self.webpackChunkxoid_website=self.webpackChunkxoid_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Getting Started","href":"/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Quick Tutorial","href":"/docs/quick-tutorial","docId":"quick-tutorial","unlisted":false},{"type":"link","label":"Performance optimizations","href":"/docs/performance-optimizations","docId":"performance-optimizations","unlisted":false},{"type":"link","label":"Streams","href":"/docs/streams","docId":"streams","unlisted":false},{"type":"link","label":"Advanced concepts","href":"/docs/advanced-concepts","docId":"advanced-concepts","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Framework Integrations","items":[{"type":"link","label":"Introduction","href":"/docs/framework-integrations/introduction","docId":"framework-integrations/introduction","unlisted":false},{"type":"link","label":"useAtom","href":"/docs/framework-integrations/use-atom","docId":"framework-integrations/use-atom","unlisted":false},{"type":"link","label":"useSetup","href":"/docs/framework-integrations/use-setup","docId":"framework-integrations/use-setup","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Recipes (React)","items":[{"type":"link","label":"Using context correctly","href":"/docs/recipes-react/using-context-correctly","docId":"recipes-react/using-context-correctly","unlisted":false},{"type":"link","label":"Creating React custom hooks","href":"/docs/recipes-react/creating-react-custom-hooks","docId":"recipes-react/creating-react-custom-hooks","unlisted":false},{"type":"link","label":"Dynamic functions with fixed references","href":"/docs/recipes-react/dynamic-functions-with-fixed-references","docId":"recipes-react/dynamic-functions-with-fixed-references","unlisted":false},{"type":"link","label":"Refactoring React classes","href":"/docs/recipes-react/refactoring-react-classes","docId":"recipes-react/refactoring-react-classes","unlisted":false},{"type":"link","label":"Grabbing refs","href":"/docs/recipes-react/grabbing-refs","docId":"recipes-react/grabbing-refs","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Recipes","items":[{"type":"link","label":"Working with nested state","href":"/docs/recipes/nested-state","docId":"recipes/nested-state","unlisted":false},{"type":"link","label":"Using immer","href":"/docs/recipes/using-immer","docId":"recipes/using-immer","unlisted":false},{"type":"link","label":"Using reducers","href":"/docs/recipes/using-reducers","docId":"recipes/using-reducers","unlisted":false},{"type":"link","label":"Using in an existing Redux App","href":"/docs/recipes/redux-interop","docId":"recipes/redux-interop","unlisted":false},{"type":"link","label":"Redux Devtools integration","href":"/docs/recipes/redux-devtools-integration","docId":"recipes/redux-devtools-integration","unlisted":false},{"type":"link","label":"Finite state machines","href":"/docs/recipes/finite-state-machines","docId":"recipes/finite-state-machines","unlisted":false},{"type":"link","label":"Persisting data with localStorage","href":"/docs/recipes/persist-localstorage","docId":"recipes/persist-localstorage","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"advanced-concepts":{"id":"advanced-concepts","title":"Advanced concepts","description":"Deriving state from external sources","sidebar":"docs"},"examples":{"id":"examples","title":"Examples","description":"- Counter Open in CodeSandbox"},"framework-integrations/introduction":{"id":"framework-integrations/introduction","title":"Introduction","description":"xoid provides an isomorphic API for React, Vue, and Svelte. If you\'re using xoid with one of these frameworks, simply install one of the following packages:","sidebar":"docs"},"framework-integrations/use-atom":{"id":"framework-integrations/use-atom","title":"useAtom","description":"import { useAtom } from \'@xoid/react\'","sidebar":"docs"},"framework-integrations/use-setup":{"id":"framework-integrations/use-setup","title":"useSetup","description":"import { useSetup } from \'@xoid/react\'","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"xoid is a scalable state management library with a small API surface.","sidebar":"docs"},"performance-optimizations":{"id":"performance-optimizations","title":"Performance optimizations","description":"Lazy evaluation","sidebar":"docs"},"quick-tutorial":{"id":"quick-tutorial","title":"Quick Tutorial","description":"You can skip this part if you\'ve already read the Github README.","sidebar":"docs"},"recipes-react/creating-react-custom-hooks":{"id":"recipes-react/creating-react-custom-hooks","title":"Creating React custom hooks","description":"With the second argument set to true, useAtom returns a 2-item tuple.","sidebar":"docs"},"recipes-react/dynamic-functions-with-fixed-references":{"id":"recipes-react/dynamic-functions-with-fixed-references","title":"Dynamic functions with fixed references","description":"Inside a React function component, in some cases a function with a fixed reference, but a dynamic content may be needed. While this is not as straightforward with React, it is with xoid*.","sidebar":"docs"},"recipes-react/grabbing-refs":{"id":"recipes-react/grabbing-refs","title":"Grabbing refs","description":"A xoid atom can be used to grab element refs (as in React\'s terminology) in a typesafe manner.","sidebar":"docs"},"recipes-react/refactoring-react-classes":{"id":"recipes-react/refactoring-react-classes","title":"Refactoring React classes","description":"xoid can provide a scaffolding system for refactoring React class components into function components. During refactoring, intermediate version of the component keeps working.","sidebar":"docs"},"recipes-react/using-context-correctly":{"id":"recipes-react/using-context-correctly","title":"Using context correctly","description":"Using React context for rarely-occuring changes such as theme providers, or internationalization is harmless. However, when context starts to be used for other things, it can affect performance badly.","sidebar":"docs"},"recipes/finite-state-machines":{"id":"recipes/finite-state-machines","title":"Finite state machines","description":"With xoid, a wide range of finite state machines can be expressed.","sidebar":"docs"},"recipes/nested-state":{"id":"recipes/nested-state","title":"Working with nested state","description":"Before xoid:","sidebar":"docs"},"recipes/persist-localstorage":{"id":"recipes/persist-localstorage","title":"Persisting data with localStorage","description":"If the data is serializable, it\'s fairly simple.","sidebar":"docs"},"recipes/redux-devtools-integration":{"id":"recipes/redux-devtools-integration","title":"Redux Devtools integration","description":"Import @xoid/devtools and set a debugValue to your atom. It will send values to the Redux Devtools Extension.","sidebar":"docs"},"recipes/redux-interop":{"id":"recipes/redux-interop","title":"Using in an existing Redux App","description":"xoid and Redux can coexist in a project without a problem. There\'s no requirement to get rid of Redux when xoid is added. If you\'re planning to gradually move away from Redux however, xoid is a good candidate to do so. For this, one thing you can do is to start managing some part of your Redux state via xoid. You can follow these steps:","sidebar":"docs"},"recipes/using-immer":{"id":"recipes/using-immer","title":"Using immer","description":"While xoid\'s API surface is kept small intentionally, there\'s a way for extensions.","sidebar":"docs"},"recipes/using-reducers":{"id":"recipes/using-reducers","title":"Using reducers","description":"xoid doesn\'t need reducers, but if you prefer to use them, or if you\'re moving away from Redux, but want to reuse your existing reducers, you can easily do that with xoid.","sidebar":"docs"},"streams":{"id":"streams","title":"Streams","description":"xoid offers basic support for streams. Streams are generally treated as a whole different concept than atoms. They\'re actually very close, and there\'s no need for a completely different library for them. xoid thinks that streams can easily be a a \\"bonus feature\\" of an atomic state management library.","sidebar":"docs"}}}')}}]);