"use strict";(self.webpackChunkxoid_website=self.webpackChunkxoid_website||[]).push([[745],{9334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var s=n(5893),r=n(1151);const a={id:"refactoring-react-classes",title:"Refactoring React classes"},c=void 0,o={id:"recipes-react/refactoring-react-classes",title:"Refactoring React classes",description:"xoid can provide a scaffolding system for refactoring React class components into function components. During refactoring, intermediate version of the component keeps working.",source:"@site/main/docs/recipes-react/refactoring-react-classes.md",sourceDirName:"recipes-react",slug:"/recipes-react/refactoring-react-classes",permalink:"/docs/recipes-react/refactoring-react-classes",draft:!1,unlisted:!1,editUrl:"https://github.com/xoidlabs/xoid/blob/main/docs/recipes-react/refactoring-react-classes.md",tags:[],version:"current",lastUpdatedAt:1696460720,formattedLastUpdatedAt:"Oct 4, 2023",frontMatter:{id:"refactoring-react-classes",title:"Refactoring React classes"},sidebar:"docs",previous:{title:"Dynamic functions with fixed references",permalink:"/docs/recipes-react/dynamic-functions-with-fixed-references"},next:{title:"Grabbing refs",permalink:"/docs/recipes-react/grabbing-refs"}},i={},p=[];function l(e){const t={code:"code",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"xoid"})," can provide a scaffolding system for refactoring React class components into function components. During refactoring, intermediate version of the component keeps working."]}),"\n",(0,s.jsx)(t.p,{children:"Let's imagine that the following class component is going to be refactored:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"class App extends React.Component {\n  // state\n  state = { alpha: 5 }\n  // methods\n  incrementAlpha = () => {\n    this.setState({ alpha: this.state.alpha + 1 })\n  }\n  render() {\n    // render\n    return <div onClick={this.incrementAlpha}>{this.state.alpha}</div> \n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here's a basic React-like class component runtime prepared with ",(0,s.jsx)(t.strong,{children:"xoid"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { create, Atom } from 'xoid'\n\nclass Runtime<Props, State> {\n  $props: Atom<Props>;\n  $state!: Atom<State>;\n  constructor($props: Atom<Props>) {\n    this.$props = $props;\n  }\n  get props() {\n    return this.$props.value;\n  }\n  get state() {\n    return this.$state.value;\n  }\n  setState(partial: Partial<State>) {\n    this.$state.update((s) => ({ ...s, ...partial }));\n  }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"We can then easily evolve into the following, working structure without too much refactor:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"class AppRuntime extends Runtime<{}, { alpha: number }> {\n  $state = create({ alpha: 5 });\n  incrementAlpha = () => {\n    this.setState({ alpha: this.state.alpha + 1 });\n  };\n}\n\nconst App = (props: Props) => {\n  const self = useSetup(($props) => new AppRuntime($props), props)\n  useAtom(self.$state)\n\n  return <div onClick={self.incrementAlpha}>{self.state.alpha}</div>\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Observe that the only big differece is replacing ",(0,s.jsx)(t.code,{children:"this"})," in the render function with ",(0,s.jsx)(t.code,{children:"self"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["After getting rid of ",(0,s.jsx)(t.code,{children:"this.setState"})," usages, we can get rid of the ",(0,s.jsx)(t.code,{children:"Runtime"})," class too."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const AppSetup = ($props: Atom<Props>) => {\n  const $state = create({ alpha: 5 })\n  const incrementAlpha = () => $state.focus('alpha').update((s) => s + 1)\n  return { $state, incrementAlpha }\n}\n\nconst App = (props: Props) => {\n  const { $state, incrementAlpha } = useSetup(AppSetup, props)\n  const { alpha } = useAtom(self.$state)\n\n  return <div onClick={self.incrementAlpha}>{alpha}</div>\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>c});var s=n(7294);const r={},a=s.createContext(r);function c(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);