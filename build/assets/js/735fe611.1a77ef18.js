"use strict";(self.webpackChunkxoid_website=self.webpackChunkxoid_website||[]).push([[271],{2893:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var n=s(5893),a=s(1151);const o={id:"quick-tutorial",title:"Quick Tutorial"},i=void 0,r={id:"quick-tutorial",title:"Quick Tutorial",description:"You can skip this part if you've already read the Github README.",source:"@site/main/docs/quick-tutorial.md",sourceDirName:".",slug:"/quick-tutorial",permalink:"/docs/quick-tutorial",draft:!1,unlisted:!1,editUrl:"https://github.com/xoidlabs/xoid/blob/main/docs/quick-tutorial.md",tags:[],version:"current",lastUpdatedAt:1696464220,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{id:"quick-tutorial",title:"Quick Tutorial"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Performance optimizations",permalink:"/docs/performance-optimizations"}},c={},l=[{value:"Atom",id:"atom",level:3},{value:"Derived state",id:"derived-state",level:3},{value:"Subscriptions",id:"subscriptions",level:3}];function d(e){const t={blockquote:"blockquote",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"You can skip this part if you've already read the Github README."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"atom",children:"Atom"}),"\n",(0,n.jsx)(t.p,{children:"Atoms are holders of state."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import create from 'xoid' // or: import { create } from 'xoid'\n\nconst $count = create(3)\nconsole.log($count.value) // 3\n$count.set(5)\n$count.update((state) => state + 1)\nconsole.log($count.value) // 6\n"})}),"\n",(0,n.jsx)(t.p,{children:"Atoms may have actions."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import create from 'xoid'\n\nconst $count = create(5, (atom) => ({\n  increment: () => atom.update(s => s + 1),\n  decrement: () => atom.value-- // `.value` setter is supported too\n}))\n\n$count.actions.increment()\n"})}),"\n",(0,n.jsxs)(t.p,{children:["There's the ",(0,n.jsx)(t.code,{children:".focus"})," method, which can be used as a selector/lens. ",(0,n.jsx)(t.strong,{children:"xoid"}),' is based on immutable updates, so if you "surgically" set state of a focused branch, changes will propagate to the root.']}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import create from 'xoid'\n\nconst $atom = create({ deeply: { nested: { alpha: 5 } } })\nconst previousValue = $atom.value\n\n// select `.deeply.nested.alpha`\nconst $alpha = $atom.focus(s => s.deeply.nested.alpha)\n$alpha.set(6)\n\n// root state is replaced with new immutable state\nassert($atom.value !== previousValue) // \u2705\nassert($atom.value.deeply.nested.alpha === 6) // \u2705\n"})}),"\n",(0,n.jsx)(t.h3,{id:"derived-state",children:"Derived state"}),"\n",(0,n.jsxs)(t.p,{children:["State can be derived from other atoms. This API was heavily inspired by ",(0,n.jsx)(t.strong,{children:"Recoil"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const $alpha = create(3)\nconst $beta = create(5)\n// derived atom\nconst $sum = create((read) => read($alpha) + read($beta))\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Alternatively, ",(0,n.jsx)(t.code,{children:".map"})," method can be used to quickly derive the state from a single atom."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const $alpha = create(3)\n// derived atom\nconst $doubleAlpha = $alpha.map((s) => s * 2)\n"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["Atoms are lazily evaluated. This means that the callback functions of ",(0,n.jsx)(t.code,{children:"$sum"})," and ",(0,n.jsx)(t.code,{children:"$doubleAlpha"})," in this example won't execute until the first subscription to these atoms. This is a performance optimization."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"subscriptions",children:"Subscriptions"}),"\n",(0,n.jsxs)(t.p,{children:["For subscriptions, ",(0,n.jsx)(t.code,{children:"subscribe"})," and ",(0,n.jsx)(t.code,{children:"watch"})," are used. They are the same, except ",(0,n.jsx)(t.code,{children:"watch"})," runs the callback immediately, while ",(0,n.jsx)(t.code,{children:"subscribe"})," waits for the first update after subscription."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const unsub = $atom.subscribe((state, previousState) => {\n  console.log(state, previousState)\n})\n\n// later\nunsub()\n"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["All methods of a ",(0,n.jsx)(t.strong,{children:"xoid"})," atom are covered up to this point. This concludes the basic usage! \ud83c\udf89"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>r,a:()=>i});var n=s(7294);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);