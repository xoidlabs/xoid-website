"use strict";(self.webpackChunkxoid_website=self.webpackChunkxoid_website||[]).push([[560],{1814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=t(5893),s=t(1151);const o={id:"finite-state-machines",title:"Finite state machines"},c=void 0,a={id:"recipes/finite-state-machines",title:"Finite state machines",description:"With xoid, a wide range of finite state machines can be expressed.",source:"@site/main/docs/recipes/finite-state-machines.md",sourceDirName:"recipes",slug:"/recipes/finite-state-machines",permalink:"/docs/recipes/finite-state-machines",draft:!1,unlisted:!1,editUrl:"https://github.com/xoidlabs/xoid/blob/main/docs/recipes/finite-state-machines.md",tags:[],version:"current",lastUpdatedAt:1696460720,formattedLastUpdatedAt:"Oct 4, 2023",frontMatter:{id:"finite-state-machines",title:"Finite state machines"},sidebar:"docs",previous:{title:"Redux Devtools integration",permalink:"/docs/recipes/redux-devtools-integration"},next:{title:"Persisting data with localStorage",permalink:"/docs/recipes/persist-localstorage"}},r={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.strong,{children:"xoid"}),", a wide range of finite state machines can be expressed."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const createMachine = () => {\n  function melt() {\n    machine.set(liquid)\n    console.log('I melted')\n  }\n\n  function freeze() {\n    machine.set(solid)\n    console.log('I freezed')\n  }\n\n  function condense() {\n    machine.set(liquid)\n    console.log('I condensed')\n  }\n\n  function vaporize() {\n    machine.set(gas)\n    console.log('I vaporized')\n  }\n\n  const solid = { name: \"ice\", actions: { melt } };\n  const liquid = { name: \"water\", actions: { freeze, vaporize } };\n  const gas = { name: \"vapor\", actions: { condense } };\n\n  const machine = create(solid)\n  return machine;\n}\n\nconst App = () => {\n  const { name, actions } = useAtom(createMachine)\n  return (\n    <div>\n      {name}\n      {Object.keys(actions).map((key) => (\n        <button key={key} onClick={actions[key]}>\n          {key}\n        </button>\n      ))}\n    </div>\n  )\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>c});var i=t(7294);const s={},o=i.createContext(s);function c(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);