"use strict";(self.webpackChunkxoid_website=self.webpackChunkxoid_website||[]).push([[841],{9250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=n(5893),s=n(1151);const i={id:"redux-devtools-integration",title:"Redux Devtools integration"},a=void 0,r={id:"recipes/redux-devtools-integration",title:"Redux Devtools integration",description:"Import @xoid/devtools and set a debugValue to your atom. It will send values to the Redux Devtools Extension.",source:"@site/main/docs/recipes/redux-devtools-integration.md",sourceDirName:"recipes",slug:"/recipes/redux-devtools-integration",permalink:"/docs/recipes/redux-devtools-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/xoidlabs/xoid/blob/main/docs/recipes/redux-devtools-integration.md",tags:[],version:"current",lastUpdatedAt:1673200693,formattedLastUpdatedAt:"Jan 8, 2023",frontMatter:{id:"redux-devtools-integration",title:"Redux Devtools integration"},sidebar:"docs",previous:{title:"Using in an existing Redux App",permalink:"/docs/recipes/redux-interop"},next:{title:"Finite state machines",permalink:"/docs/recipes/finite-state-machines"}},d={},c=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Import ",(0,o.jsx)(t.code,{children:"@xoid/devtools"})," and set a ",(0,o.jsx)(t.code,{children:"debugValue"})," to your atom. It will send values to the Redux Devtools Extension."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { devtools } from '@xoid/devtools'\nimport { create, use } from 'xoid'\ndevtools() // run once\n\nconst atom = create(\n  { alpha: 5 }, \n  (atom) => {\n    const $alpha = atom.focus(s => s.alpha)\n    return {\n      inc: () => $alpha.update(s => s + 1),\n      resetState: () => atom.set({ alpha: 5 })\n      deeply: {\n        nested: {\n          action: () => $alpha.set(5)\n        }\n      } \n    }\n  }\n)\n\natom.debugValue = 'myAtom' // enable watching it by the devtools\n\nconst { deeply, incrementAlpha } = atom.actions // destructuring is no problem\nincrementAlpha() // logs \"(myAtom).incrementAlpha\"\ndeeply.nested.action() // logs \"(myAtom).deeply.nested.action\"\natom.focus(s => s.alpha).set(25)  // logs \"(myAtom) Update ([timestamp])\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>a});var o=n(7294);const s={},i=o.createContext(s);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);