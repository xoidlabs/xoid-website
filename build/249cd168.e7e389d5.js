(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),o=(n(0),n(93)),i=["components"],c={id:"redux-interop",title:"Using in an existing Redux App"},s={unversionedId:"recipes/redux-interop",id:"recipes/redux-interop",isDocsHomePage:!1,title:"Using in an existing Redux App",description:"xoid and Redux can coexist in a project without a problem. There's no requirement to get rid of Redux when xoid is added. If you're planning to gradually move away from Redux however, xoid is a good candidate to do so. For this, one thing you can do is to start managing some part of your Redux state via xoid. You can follow these steps:",source:"@site/main/docs/recipes/redux-interop.md",slug:"/recipes/redux-interop",permalink:"/docs/recipes/redux-interop",editUrl:"https://github.com/xoidlabs/xoid/blob/main/docs/recipes/redux-interop.md",version:"current",sidebar:"docs",previous:{title:"Using reducers",permalink:"/docs/recipes/using-reducers"},next:{title:"Redux Devtools integration",permalink:"/docs/recipes/redux-devtools-integration"}},p=[{value:"Step 1: create an &quot;omnipotent&quot; action that has the ability to replace the Redux state",id:"step-1-create-an-omnipotent-action-that-has-the-ability-to-replace-the-redux-state",children:[]},{value:"Step 2: Create an &quot;enhanced atom&quot;",id:"step-2-create-an-enhanced-atom",children:[]}],d={rightToc:p},u="wrapper";function l(e){var t=e.components,n=Object(a.a)(e,i);return Object(o.b)(u,Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"xoid")," and Redux can coexist in a project without a problem. There's no requirement to get rid of Redux when ",Object(o.b)("strong",{parentName:"p"},"xoid")," is added. If you're planning to gradually move away from Redux however, ",Object(o.b)("strong",{parentName:"p"},"xoid")," is a good candidate to do so. For this, one thing you can do is to start managing some part of your Redux state via ",Object(o.b)("strong",{parentName:"p"},"xoid"),". You can follow these steps:"),Object(o.b)("h3",{id:"step-1-create-an-omnipotent-action-that-has-the-ability-to-replace-the-redux-state"},'Step 1: create an "omnipotent" action that has the ability to replace the Redux state'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const someExistingReducer = (state, action) => {\n  switch(action.type) {\n    case 'EXTERNAL_XOID_UPDATE': {\n      return action.payload\n    }\n    ... // other `case` clauses\n  }\n")),Object(o.b)("h3",{id:"step-2-create-an-enhanced-atom"},'Step 2: Create an "enhanced atom"'),Object(o.b)("p",null,"This will forward subscriptions and state modifications directly to the Redux store."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import { store } from './store'\n\nconst $mediatorAtom = create((read) => read(store.getState, store.subscribe))\n$mediatorAtom.set = (payload) => store.dispatch({ type: 'EXTERNAL_XOID_UPDATE', payload })\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Usually, atoms are derived from other ",Object(o.b)("strong",{parentName:"p"},"atoms")," (as ",Object(o.b)("inlineCode",{parentName:"p"},"create((read) => get($someAtom))"),"). Observe how ",Object(o.b)("inlineCode",{parentName:"p"},"read")," is used with two arguments in this example. This is an additional overload that is used to consume an external (non-",Object(o.b)("strong",{parentName:"p"},"xoid"),") source. As long as the external source implements some getState & subscribe pair, it can be consumed by ",Object(o.b)("strong",{parentName:"p"},"xoid")," like this. (See ",Object(o.b)("a",{parentName:"p",href:"../advanced-concepts#deriving-state-from-external-sources"},"Deriving state from external sources"),")"),Object(o.b)("p",{parentName:"blockquote"},"Also, in the second line, you may see that the default ",Object(o.b)("inlineCode",{parentName:"p"},"set")," method is overriden. In ",Object(o.b)("strong",{parentName:"p"},"xoid"),"'s terminology, atoms like these are called ",Object(o.b)("a",{parentName:"p",href:"../advanced-concepts#enhanced-atoms"},"enhanced atoms"),". Overriding the default ",Object(o.b)("inlineCode",{parentName:"p"},"set")," method also will modify the ",Object(o.b)("inlineCode",{parentName:"p"},"update")," method's behavior.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note: If a partial Redux state is desired, A selector instead of the ",Object(o.b)("inlineCode",{parentName:"p"},"store.getState")," can be used. Second argument remains same as ",Object(o.b)("inlineCode",{parentName:"p"},"store.subscribe"),".")))}l.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),d=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=d(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},l="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),l=r,m=u["".concat(i,".").concat(l)]||u[l]||b[l]||o;return n?a.a.createElement(m,c(c({ref:t},p),{},{components:n})):a.a.createElement(m,c({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);